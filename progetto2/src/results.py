# This module contains the function used to display the results obtained with the image processing

import matplotlib.pyplot as plt
import os
import numpy as np
import math as m


# this function shows an interactive window containing two images side by side
def display_images(img1, img2):
    plt.style.use('ggplot')
    plt.figure("Output")
    plt.subplot(1, 2, 1)
    plt.title('Image before compression')
    plt.imshow(img1, cmap=plt.get_cmap('gray'))
    plt.axis('off')
    plt.subplot(1, 2, 2)
    plt.imshow(img2, cmap=plt.get_cmap('gray'))
    plt.title('Image after compression')
    plt.axis('off')
    plt.show()


# This function is used to save on a file the results of the comparison of the dct2 implementations
def save_results_on_file(my_dct2_time, lib_dct2_time, dimension_matrix, step):
    dir = "../results"
    if not os.path.isdir(dir):
        os.makedirs(dir)
    file_name = "%s/output_%d_step_%d.txt" % (dir, dimension_matrix[len(dimension_matrix) - 1], step)
    f = open(file_name, "w")

    f.write("Matrix dimensions: \n")
    f.write("[")
    for i in dimension_matrix[0 : len(dimension_matrix) - 1]:
        f.write(str(i) + ", ")
    f.write(str(dimension_matrix[len(dimension_matrix) - 1]))
    f.write("]\n\n")

    f.write("Execution time of my dct2 implementation: \n")
    f.write("[")
    for i in range(0, len(my_dct2_time) - 1):
        f.write(str(my_dct2_time[i]) + ", ")
    f.write(str(my_dct2_time[len(my_dct2_time) - 1]))
    f.write("]\n\n")

    f.write("Execution time of the dct2 of the library: \n")
    f.write("[")
    for i in range(0, len(lib_dct2_time) - 1):
        f.write(str(lib_dct2_time[i]) + ", ")
    f.write(str(lib_dct2_time[len(lib_dct2_time) - 1]))
    f.write("]")

    f.close()


# This function is used to plot the results of the comparison of the dct2 implementations
def plot_results(my_dct2_time, lib_dct2_time, dimension_matrix):
    plt.style.use('ggplot') # To improve visualization

    # build first line
    line_my_dct2, = plt.semilogy(dimension_matrix, np.array(my_dct2_time) * 1000)
    line_my_dct2.set_label('my dct2 implementation')
    plt.setp(line_my_dct2, color="b")

    # build second line
    line_lib_dct2, = plt.semilogy(dimension_matrix, np.array(lib_dct2_time) * 1000)
    line_lib_dct2.set_label('dct2 of the library')
    plt.setp(line_lib_dct2, color="r")
    
    # build second line
    line_cubic_time, = plt.semilogy(dimension_matrix, 0.007 * np.array(dimension_matrix) ** 3)
    line_cubic_time.set_label('$O(0.007N^{3})$')
    plt.setp(line_cubic_time, color="g", linestyle="--")
    
    # build second line
    line_log_time, = plt.semilogy(dimension_matrix, (np.array(dimension_matrix) ** 2) * np.array([m.log10(x)*0.0002 for x in dimension_matrix]))
    line_log_time.set_label('$O(0.0002N^{2}log(N))$')
    plt.setp(line_log_time, color="y", linestyle="--")

    # add more graph info
    plt.title("Comparison between the dct2 implementations")
    plt.legend()
    plt.xlabel("Dimension of the matrix (N x N)")
    plt.ylabel("Time in milliseconds (log scale)")

    # show graph
    plt.show()


# create graph for latex report, using the results obtained during the experiments in merge.txt
if __name__ == "__main__":
    # Execution time of my dct2 implementation:
    my_dct2_time =[0.0, 0.003906667232513428, 0.05078238248825073, 0.16015875339508057, 0.35938429832458496, 0.6992014050483704, 1.1835964918136597, 1.8046844005584717, 2.691409170627594, 3.7851849794387817, 5.308560907840729, 6.859406888484955, 8.83981454372406, 11.113282322883606, 13.6796994805336, 16.843761682510376, 20.30467391014099, 24.50389665365219, 29.360527336597443, 34.249985098838806, 39.76565498113632, 45.44139289855957, 52.484388530254364, 59.17186766862869, 68.07422751188278, 77.10545563697815, 86.35938000679016, 96.50781393051147, 107.31640696525574, 119.20312488079071, 132.55469810962677, 146.6444833278656, 160.6406215429306, 176.32422822713852, 192.07422649860382, 209.65625476837158, 228.82035714387894, 247.73437547683716, 268.7968646287918, 290.0390751361847, 313.6289295554161, 337.9453099370003, 361.71872103214264, 389.7070255279541, 415.222674369812, 445.16021060943604, 476.46093487739563, 508.5664133429527, 536.8398405313492, 576.36717659235, 611.6211140751839, 649.3556051850319, 684.1835824847221, 728.9687618613243, 769.2499945759773, 813.4882615208626, 857.4140560030937, 905.8750101923943, 956.1054619550705, 1004.7304738759995, 1054.918001115322, 1112.4296970963478, 1166.332036614418, 1221.81641715765, 1279.656237900257, 1344.3398386836052, 1406.7578074336052, 1472.765644133091, 1532.2812349796295, 1605.3124788999557, 1680.5195139050484, 1749.5468907952309, 1821.87112480402, 1908.730426311493, 1979.8398633003235, 2069.523439884186, 2146.0703331828117, 2239.2890731096268, 2322.3085728883743, 2413.4414082169533, 2504.4089788794518, 2610.5625208616257, 2712.5664093494415, 2832.58202034235, 2911.4648614525795, 3034.289059340954, 3122.4921830892563, 3213.9765552282333, 3321.8517837524414, 3451.097661972046, 3548.6484424471855, 3683.8554700016975, 3786.5055248737335, 3932.3749759197235, 4043.7929695248604, 4191.605475902557, 4306.3711242079735, 4469.808591246605, 4580.562494277954, 4707.574238598347, 4822.226565659046]

    # Execution time of the dct2 of the library:
    lib_dct2_time = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00390547513961792, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003906905651092529, 0.0, 0.003891289234161377, 0.0, 0.003913283348083496, 0.003904998302459717, 0.015619158744812012, 0.0, 0.007814288139343262, 0.003902256488800049, 0.01566755771636963, 0.003909945487976074, 0.003907322883605957, 0.011704206466674805, 0.0039047598838806152, 0.007810473442077637, 0.031217992305755615, 0.00780719518661499, 0.03906446695327759, 0.003891468048095703, 0.015627384185791016, 0.015615880489349365, 0.05469167232513428, 0.0039067864418029785, 0.007812082767486572, 0.027295708656311035, 0.007813513278961182, 0.02344071865081787, 0.08204472064971924, 0.01562190055847168, 0.05075424909591675, 0.01550447940826416, 0.011713624000549316, 0.01562631130218506, 0.10938405990600586, 0.008198022842407227, 0.0546838641166687, 0.015614688396453857, 0.03515934944152832, 0.019531607627868652, 0.023408055305480957, 0.011708319187164307, 0.07420670986175537, 0.03124159574508667, 0.046877264976501465, 0.07424426078796387, 0.07812970876693726, 0.015619993209838867, 0.03126823902130127, 0.08987140655517578, 0.01952749490737915, 0.054670751094818115, 0.031246960163116455, 0.03908652067184448, 0.04296606779098511, 0.031237125396728516, 0.09371757507324219, 0.13673657178878784, 0.027339696884155273, 0.02350383996963501, 0.11709445714950562, 0.035147011280059814, 0.09375077486038208, 0.027354776859283447, 0.14060401916503906, 0.054686129093170166, 0.14062738418579102, 0.07812613248825073, 0.02321624755859375, 0.18358337879180908, 0.04688447713851929, 0.03515934944152832, 0.15236783027648926, 0.22266173362731934, 0.14061641693115234, 0.04686605930328369, 0.05076819658279419, 0.03906846046447754, 0.1953144669532776, 0.0546649694442749, 0.03906506299972534]

    # Matrix dimensions:
    dimension_matrix = [2, 12, 22, 32, 42, 52, 62, 72, 82, 92, 102, 112, 122, 132, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 302, 312, 322, 332, 342, 352, 362, 372, 382, 392, 402, 412, 422, 432, 442, 452, 462, 472, 482, 492, 502, 512, 522, 532, 542, 552, 562, 572, 582, 592, 602, 612, 622, 632, 642, 652, 662, 672, 682, 692, 702, 712, 722, 732, 742, 752, 762, 772, 782, 792, 802, 812, 822, 832, 842, 852, 862, 872, 882, 892, 902, 912, 922, 932, 942, 952, 962, 972, 982, 992, 1000]

    plot_results(my_dct2_time, lib_dct2_time, dimension_matrix)